{% extends 'reportMenu.html' %} {% block ManagementContent %}
 <div class="container">
      <h1 class="h1-container">Thống kê Người dùng</h1>
    <div class ="card-bar">
      <div class ="mycard" style ="background-color: #ccd9b7"; >
        <div class ="mycard-title">
          <p>
            Tổng số người dùng
          </p>
        </div>
        <div class ="mycard-number">
          <p>
            {{ total_users | default('N/A') }}
          </p>
        </div>
      </div>
      <div class ="mycard" style ="background-color: rgb(232, 198, 175)";>
        <div class ="mycard-title">
          <p>
            Số người dùng mới trong ngày
          </p>
        </div>
        <div class ="mycard-number">
          <p>
            {{ new_user_today_count |default('N/A') }}
          </p>
        </div>
      </div>
      <div class ="mycard" style ="background-color: #ccd9b7";>
        <div class ="mycard-title">
          <p>
            Số người dùng mới trong tháng
          </p>
        </div>
        <div class ="mycard-number">
          <p>
            {{ new_user_month_count | default('N/A') }}
          </p>
        </div>
      </div>
      <div class ="mycard" style ="background-color:rgb(232, 198, 175)";>
        <div class ="mycard-title">
          <p>
            Số người dùng mới trong năm
          </p>
        </div>
        <div class ="mycard-number">
          <p>
           {{ new_user_year_count |  default('N/A') }}
          </p>
        </div>
      </div>
    </div>
<!-- ............................-->
      {% if form %}
      <form method="POST">
        {{ form.hidden_tag() }}
        <div class ="select-year">
          <label style= "display:block;"
            for="year"
            >{{ form.year.label.text}}</label>
          {{ form.year(class="form-control") }} 
          <button type="submit">Xem</button>
        </div>
        
      </form>
      {% else %}
      <p><em>(Form chọn năm không khả dụng)</em></p>
      {% endif %}

<!-- ............................-->
    <div class="chart-general">
      <div class="chart-content">
        <div class="chart-container" style="flex:2;">
          <h2 style="font-weight:bold;">Số lượng người dùng đăng ký theo tháng</h2>
          <canvas id="newUserByMonthChartID" width="600" height="400"></canvas>
        </div>
        <div class="chart-container" style="flex:1;">
          <h2 style="font-weight:bold;">Tỷ lệ loại tài khoản</h2>
          <canvas id="userTypeChartID" width="200" height="200"></canvas>
        </div>
      </div>
        <div class="chart-container" style ="margin-top:20px;">
          <h2 style="font-weight:bold;"> Top 5 người {{ selected_post_type }} nhiều đồ nhất</h2>

        <div>
            <a href="{{ url_for('report.show_userReport', type='Thanh Lý') }}" >
                <button 
                {% if selected_post_type == 'Thanh Lý' %}style="font-weight:bold"
                {% endif %}
                class="btn btn-primary"
                >
                  Thanh Lý
                </button>
            </a>
            <a href="{{ url_for('report.show_userReport', type='Trao Đổi') }}" >
                <button 
                {% if selected_post_type == 'Trao Đổi' %}style="font-weight:bold"
                {% endif %}
                class="btn btn-success"
                >
                  Trao Đổi
                </button>
            </a>
            <a href="{{ url_for('report.show_userReport', type='Donate') }}" >
                <button 
                {% if selected_post_type == 'Donate' %}style="font-weight:bold"
                {% endif %}
                class="btn btn-warning"
                >
                  Donate
                </button>
            </a>
        </div>

        <table border="1" cellpadding="5" class="table table-striped table-hover align-middle">
        <thead class="table-dark">
          <tr>
              <th>STT</th>
              <th>Mã HS/SV</th>
              <th>Họ tên</th>
              <th>Số bài đã đăng</th>
          </tr>
          </thead>
      <tbody>
          {% for username, fullname, count in top_users %}
          <tr>
              <td>{{ loop.index }}</td> <!-- STT bắt đầu từ 1 -->
              <td>{{ username }}</td>
              <td>{{ fullname }}</td>
              <td>{{ count }} bài đăng</td>
          </tr>
      </tbody>
      {% endfor %}
    </table>


        </div> 
      </div>
    </div>
    <button onclick="downloadPDF()" class="btn btn-outline-success" style ="display:block; margin: auto;">Xuất file PDF</button>
  </div>
    



{% endblock %}

{% block extra_js %}
<!--  -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // Dữ liệu mẫu cho user_counts trong trường hợp Flask không truyền qua hoặc để test độc lập
      // Trong môi trường Flask thực tế, dòng này sẽ bị ghi đè bởi dữ liệu từ server
      var defaultUserCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      // Lấy dữ liệu user_counts từ Flask. Nếu không có, sử dụng mảng 12 số 0.
      // Sử dụng `||` để cung cấp giá trị mặc định nếu `user_counts` là null, undefined, hoặc một chuỗi rỗng không hợp lệ sau tojson.
      var userDataFromServer = {{ user_counts | tojson | safe }};
      var userCountsData;

      if (
          userDataFromServer &&
          Array.isArray(userDataFromServer) &&
          userDataFromServer.length === 12
      ) {
          // Nếu có dữ liệu từ server và là mảng đủ 12 phần tử (12 tháng)
          userCountsData = userDataFromServer;
      } else {
          // Nếu không hợp lệ, dùng dữ liệu mặc định
          userCountsData = defaultUserCounts;
      }


      
      // Kiểm tra xem phần tử canvas có tồn tại không
      var canvasElement = document.getElementById("newUserByMonthChartID");

      if (canvasElement) {
        var ctx = canvasElement.getContext("2d");
        var newUserByMonthChartID = new Chart(ctx, {
          type: "bar", // Loại biểu đồ (cột)
          data: {
            labels: [
              "Tháng 1",
              "Tháng 2",
              "Tháng 3",
              "Tháng 4",
              "Tháng 5",
              "Tháng 6",
              "Tháng 7",
              "Tháng 8",
              "Tháng 9",
              "Tháng 10",
              "Tháng 11",
              "Tháng 12",
            ], // Các tháng
            datasets: [
              {
                label: "Số người dùng đăng ký", // Tên biểu đồ
                data: userCountsData, // Truyền dữ liệu từ Flask sang JavaScript (đã có xử lý fallback)
                backgroundColor: "rgba(54, 162, 235, 0.6)", // Màu nền cho cột (tăng độ đậm)
                borderColor: "rgba(54, 162, 235, 1)", // Màu viền cho cột
                borderWidth: 1, // Độ dày viền cột
                hoverBackgroundColor: "rgba(54, 162, 235, 0.8)", // Màu khi hover
                hoverBorderColor: "rgba(54, 162, 235, 1)",
              },
            ],
          },
          options: {
            indexAxis: "y", // để biểu đồ bar ngang
            responsive: false, // Cho phép biểu đồ tự điều chỉnh kích thước
            maintainAspectRatio: false, // Cho phép thay đổi tỷ lệ khung hình (hữu ích khi đặt chiều cao cố định)
            plugins: { legend: { position: "top" } },
            scales: {
              x: {
                beginAtZero: true, // Đảm bảo trục y bắt đầu từ 0
                ticks: {

                  // Đảm bảo các giá trị trên trục y là số nguyên nếu phù hợp
                  callback: function (value) {
                    if (Number.isInteger(value)) {
                      return value;
                    }
                  },
                  stepSize: 1, // Hoặc một giá trị phù hợp với dữ liệu của bạn
                },
              },
              y: {
                grid: {
                  display: false, // Ẩn lưới dọc cho trục x nếu muốn
                },
              },
            },
            plugins: {
              legend: {
                position: "top", // Vị trí của chú giải
              },
              tooltip: {
                enabled: true, // Bật tooltip
                backgroundColor: "rgba(0,0,0,0.7)",
                titleFont: {
                  size: 14,
                },
                bodyFont: {
                  size: 12,
                },
                callbacks: {
                  label: function (context) {
                  const label = context.dataset.label || "";
                  const value = context.parsed.x; // Trục x là số lượng người dùng
                  return `${label}: ${value} người`;
                  },
                },
              },
            },
          },
        });
      } else {
        console.error("Không tìm thấy phần tử canvas với ID 'newUserByMonthChartID'.");
      }
    </script>


    

    <script>
      // Dữ liệu mặc định khi không có dữ liệu từ server
      var defaultPieLabels = ["Không có dữ liệu", "Không có dữ liệu"];
      var defaultPieCounts = [0, 0];

      // Lấy dữ liệu từ server (nếu có)
      var pieLabelsFromServer = {{ data.label_type | tojson | safe if data and data.label_type else 'null' }};
      var pieCountsFromServer = {{ data.count_type | tojson | safe if data and data.count_type else 'null' }};

      // Kiểm tra và sử dụng nhãn biểu đồ (labels)
      var pieChartLabels;
      if (pieLabelsFromServer && Array.isArray(pieLabelsFromServer) && pieLabelsFromServer.length > 0) {
          pieChartLabels = pieLabelsFromServer;
      } else {
          pieChartLabels = defaultPieLabels;
      }

      // Kiểm tra và sử dụng số liệu biểu đồ (counts)
      var pieChartCounts;
      if (
          pieCountsFromServer &&
          Array.isArray(pieCountsFromServer) &&
          pieCountsFromServer.length === pieChartLabels.length // Đảm bảo số lượng khớp với labels
      ) {
          pieChartCounts = pieCountsFromServer;
      } else {
          // Nếu đang dùng nhãn mặc định, dùng luôn số liệu mặc định
          if (pieChartLabels === defaultPieLabels) {
              pieChartCounts = defaultPieCounts;
          } else {
              // Nếu nhãn hợp lệ nhưng số liệu không khớp, tạo mảng số 0 tương ứng
              pieChartCounts = pieChartLabels.map(() => 0);
          }
      }

      // Tạo biểu đồ nếu phần tử canvas tồn tại
      var pieCanvasElement = document.getElementById('userTypeChartID');
      if (pieCanvasElement) {
          const ctxPie = pieCanvasElement.getContext('2d');
          const userTypeChartID = new Chart(ctxPie, {
              type: 'pie',
              data: {
                  labels: pieChartLabels,
                  datasets: [{
                      label: 'Tài khoản',
                      data: pieChartCounts,
                      backgroundColor: ['#4e73df', '#f6c23e', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'], // Thêm màu nếu cần
                      borderWidth: 1
                  }]
              },
              options: {
                  responsive: true,
                  plugins: {
                      legend: {
                          position: 'bottom'
                      },
                      tooltip: {
                          callbacks: {
                              label: function(context) {
                                  let total = context.dataset.data.reduce((a, b) => a + b, 0);
                                  if (total === 0) return `${context.label}: 0 (0%)`; // Tránh chia cho 0
                                  let percent = ((context.raw / total) * 100).toFixed(1);
                                  return `${context.label}: ${context.raw} (${percent}%)`;
                              }
                          }
                      }
                  }
              }
          });
      } else {
          console.error("Không tìm thấy phần tử canvas với ID 'userTypeChartID'.");
      }



      async function downloadPDF() {
        const element = document.querySelector(".container"); // vùng muốn chụp

        // Dùng html2canvas render toàn bộ phần tử kể cả phần cuộn
        const canvas = await html2canvas(element, {
          scale: 2,
          useCORS: true,
          scrollY: -window.scrollY // xử lý phần bị che bởi cuộn
        });

        const imgData = canvas.toDataURL("image/png");
        const pdf = new jspdf.jsPDF("p", "mm", "a4");

        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();

        const imgProps = pdf.getImageProperties(imgData);
        const imgHeight = (imgProps.height * pdfWidth) / imgProps.width;

        let heightLeft = imgHeight;
        let position = 0;

        // Thêm trang nếu nội dung dài
        while (heightLeft > 0) {
          pdf.addImage(imgData, "PNG", 0, position, pdfWidth, imgHeight);
          heightLeft -= pageHeight;
          if (heightLeft > 0) {
            pdf.addPage();
            position = -heightLeft;
          }
        }

        pdf.save("ThongKeNguoiDung.pdf");
      }

    </script>


    

{% endblock %}
